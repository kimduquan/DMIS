//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DocumentPreviewGenerator.FileService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileService.IFileService")]
    internal interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/ConvertToPDF", ReplyAction="http://tempuri.org/IFileService/ConvertToPDFResponse")]
        void ConvertToPDF(string inputFile, string outputFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/ConvertToPDF", ReplyAction="http://tempuri.org/IFileService/ConvertToPDFResponse")]
        System.Threading.Tasks.Task ConvertToPDFAsync(string inputFile, string outputFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/IsSupportedExtension", ReplyAction="http://tempuri.org/IFileService/IsSupportedExtensionResponse")]
        bool IsSupportedExtension(string extension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/IsSupportedExtension", ReplyAction="http://tempuri.org/IFileService/IsSupportedExtensionResponse")]
        System.Threading.Tasks.Task<bool> IsSupportedExtensionAsync(string extension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetSuggestImageSize", ReplyAction="http://tempuri.org/IFileService/GetSuggestImageSizeResponse")]
        System.Drawing.Size GetSuggestImageSize(string extension, bool isThumbnail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetSuggestImageSize", ReplyAction="http://tempuri.org/IFileService/GetSuggestImageSizeResponse")]
        System.Threading.Tasks.Task<System.Drawing.Size> GetSuggestImageSizeAsync(string extension, bool isThumbnail);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IFileServiceChannel : DocumentPreviewGenerator.FileService.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class FileServiceClient : System.ServiceModel.ClientBase<DocumentPreviewGenerator.FileService.IFileService>, DocumentPreviewGenerator.FileService.IFileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ConvertToPDF(string inputFile, string outputFile) {
            base.Channel.ConvertToPDF(inputFile, outputFile);
        }
        
        public System.Threading.Tasks.Task ConvertToPDFAsync(string inputFile, string outputFile) {
            return base.Channel.ConvertToPDFAsync(inputFile, outputFile);
        }
        
        public bool IsSupportedExtension(string extension) {
            return base.Channel.IsSupportedExtension(extension);
        }
        
        public System.Threading.Tasks.Task<bool> IsSupportedExtensionAsync(string extension) {
            return base.Channel.IsSupportedExtensionAsync(extension);
        }
        
        public System.Drawing.Size GetSuggestImageSize(string extension, bool isThumbnail) {
            return base.Channel.GetSuggestImageSize(extension, isThumbnail);
        }
        
        public System.Threading.Tasks.Task<System.Drawing.Size> GetSuggestImageSizeAsync(string extension, bool isThumbnail) {
            return base.Channel.GetSuggestImageSizeAsync(extension, isThumbnail);
        }
    }
}
